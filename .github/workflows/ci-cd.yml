# CI/CD Pipeline for Production-Ready E-Voting System
name: E-Voting CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily security scans
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint Analysis
        run: npm run lint

      - name: TypeScript Check
        run: npm run type-check

      - name: Security Audit
        run: npm audit --audit-level moderate

      - name: SAST with CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'evoting-system'
          path: '.'
          format: 'ALL'

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: reports

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit -- --coverage

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration

      - name: Run E2E Tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build
          npm run test:e2e

      - name: Upload Coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

      - name: Stop test services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Security Testing
  security-testing:
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: DAST with OWASP ZAP
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Biometric Security Test
        run: |
          npm run test:biometric-security

      - name: Blockchain Security Audit
        run: |
          npm run audit:blockchain

      - name: GDPR Compliance Check
        run: |
          npm run test:gdpr-compliance

  # Performance Testing
  performance-testing:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          sleep 10

      - name: Load Testing with Artillery
        run: |
          npx artillery run tests/performance/load-test.yml

      - name: Biometric Processing Performance Test
        run: |
          npm run test:biometric-performance

      - name: Blockchain Performance Test
        run: |
          npm run test:blockchain-performance

      - name: Upload Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: reports/performance/

  # Build and Security Scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: [security-testing, performance-testing]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Container Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Container Benchmark with Docker Bench
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v /etc:/etc:ro -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /bin/ps:/bin/ps:ro docker/docker-bench-security

  # Deployment to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment scripts here

      - name: Smoke Tests
        run: |
          npm run test:smoke -- --env=staging

      - name: Security Validation
        run: |
          npm run test:security -- --env=staging

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-scan, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Production Readiness Check
        run: |
          npm run check:production-ready

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment scripts here

      - name: Health Check
        run: |
          npm run test:health-check -- --env=production

      - name: Monitoring Setup
        run: |
          npm run setup:monitoring

  # Post-Deployment Monitoring
  post-deployment:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Performance Monitoring
        run: |
          echo "Setting up performance monitoring..."

      - name: Security Monitoring
        run: |
          echo "Activating security monitoring..."

      - name: GDPR Compliance Monitoring
        run: |
          echo "Enabling GDPR compliance monitoring..."

      - name: Fraud Detection Activation
        run: |
          echo "Activating fraud detection systems..."

# Workflow for scheduled security scans
  scheduled-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Comprehensive Security Scan
        run: |
          echo "Running comprehensive security scan..."

      - name: Dependency Vulnerability Scan
        run: |
          npm audit --audit-level low

      - name: Container Image Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Infrastructure Security Check
        run: |
          echo "Checking infrastructure security..."

      - name: Create Security Report
        run: |
          echo "Creating security report..."

      - name: Notify Security Team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}